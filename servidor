#!/usr/bin/env python3
import asyncio
from grader.tcp import Conexao, Servidor
from trata_dados import enviar_dados_tratados, avisar_usuarios_de_sua_saida

# Novos atributos do Servidor
setattr(Servidor, 'users', {}) # {'nome_uppercase': obj_conexao} 
setattr(Servidor, 'canais', {}) # {'nome_canal_uppercase': list[nome_dos_usuarios]} 

# Novos atributos da Conexao
setattr(Conexao, 'residuos', b'')
setattr(Conexao, 'nome', b'*')
setattr(Conexao, 'lista_de_canais_atuais', [])


def sair(conexao, servidor):
    print(conexao, 'conexão fechada')
    avisar_usuarios_de_sua_saida(conexao, servidor)
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao, SERVIDOR)

    enviar_dados_tratados(conexao, dados, SERVIDOR)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


SERVIDOR = Servidor(6667)
SERVIDOR.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
